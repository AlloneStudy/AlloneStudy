   一. Groovy的简介:
  答:A. Groovy是一种基于JVM（Java虚拟机）的敏捷开发语言，它结合了Python、Ruby和Smalltalk的许多强大的特性，
    Groovy 代码能够与 Java 代码很好地结合，也能用于扩展现有代码。由于其运行在 JVM 上的特性，Groovy 可以使用其他 Java 语言编写的库。
    
     B. 应用范围:groovy的生态中有gradle(安卓在使用), grails. gant, spock, Geb. Griffion。从生态上已经很全面了。
             最近又可以用groovy来开发Android了。如杨飞所答，有java的地方就可以有groovy。只是同时java也在进化，类库等以java为主。不会发生直接替代。但是groovy的应用也会越来越广泛。
             Groovy这种脚本语言一般就是去当胶水用的，比如连接各个Java组件，或者去实现一些易变性配置，比如用Groovy去写Maven插件，或者测试Java模块的测试例，我总有种错觉，写它就像写python 。

     C.使用Groovy语言的框架:  注:主流框架:Grails(是java+Groovy)
            Gradle，自动化构建工具，通过简单编写Groovy脚本，便可进行依赖管理并完成项目构建；
            Spock，测试框架，可通过其特有的DSL编写测试案例；
            Grails，Web开发框架，无需自行编写脚手架代码，可用来快速开发；
            Griffon，Swing开发框架，其灵感来自于Grails。

  
   二.Groovy这门小众语言有哪些具体项目使用场景？
  答: A.写Java程序原型用它写极其方便，但对于Java目前的主流市场企业级应用项目上有哪些成功案例？ 

      1.写项目的时候用Gradle，背后是Groovy，spring/hibernate的后面越来越多的Groovy，
      2.甚至在用Jira跟踪项目时，背后也有Groovy。实际上就应用场景而言，Java开发已经有越来越多的Groovy出现在后台了。
      而对于一般的应用开发，只要能用Java就都能用到Groovy，唯一的难点只在于能不能招到并保持足够的人员。
      
      B.我们正在做的一个项目用到了，这是一个机器学习的平台，平台里面可以接入各种机器学习的算法，目前已经支持30来种算法。
        每个算法有各种各样的参数，为了提高用户友好性，让用户使用起来更方便，用户在页面上“填入”，“选择”的参数值跟我们实际提交到集群执行的参数往往不一样，比如：
用户选择一个算法的输入表table1，而实际上我们提交给后台集群的时候需要加上当前project的名字(假如是project1)：project1.table1。
又比如有些算法参数是不需要用户输入的，比如一个算法的输出表，具体的表名用户其实不关心，他只想我们把最后的结果告诉他，这时候我们需要给他自动生成输出表名的参数。
这样就需要一个“参数转换”的过程，这些参数转换逻辑虽然不复杂，但是它们有一个重要的特征：不可枚举。因此我们采用了Groovy脚本来描述这个转换算法。而且我们机器学习平台将来的目标是允许用户上传自己编写的算法，这个转换逻辑的可配置化就显得更必要了。

      C.我们用来做规则引擎、流程引擎，可以做动态脚本环境，尤其是那些不需要发布又经常变更的场合
      
      
    三.Groovy开发文档
    1.http://www.open-open.com/doc/list/238?o=d
    